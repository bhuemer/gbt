/*
 * Copyright (c) 2019 Bernhard Huemer (bernhard.huemer@gmail.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.github.bhuemer.gbt.tasks.support;

import java.util.Objects;
import java.util.function.Supplier;

import org.gradle.api.logging.Logger;
import scala.Enumeration;
import scala.Function0;

/**
 * Passes on log messages generated by SBT to the Gradle logger.
 */
public class LoggerAdapter extends sbt.util.Logger {

    /** */
    private final Logger logger;

    public LoggerAdapter(Logger logger) {
        this.logger = Objects.requireNonNull(logger, "The given logger instance must not be null.");
    }

    // ------------------------------------------ xsbti.Logger methods

    @Override
    public void debug(Supplier<String> msg) {
        logger.debug(msg.get());
    }

    @Override
    public void warn(Supplier<String> msg) {
        logger.warn(msg.get());
    }

    @Override
    public void info(Supplier<String> msg) {
        logger.info(msg.get());
    }

    @Override
    public void error(Supplier<String> msg) {
        logger.error(msg.get());
    }

    @Override
    public void trace(Supplier<Throwable> error) {
        logger.trace("", error.get());
    }

    // ------------------------------------------ sbt.util.Logger methods

    @Override
    public void trace(Function0<Throwable> error) {
        logger.trace("", error.apply());
    }

    @Override
    public void success(Function0<String> msg) {
        logger.info(msg.apply());
    }

    @Override
    public void log(Enumeration.Value level, Function0<String> msg) {
        if (level == null) {
            return;
        }

        switch (level.toString()) {
            case "info":
                logger.info(msg.apply());
                return;

            case "debug":
                logger.debug(msg.apply());
                return;

            case "warn":
                logger.warn(msg.apply());
                return;

            case "error":
                logger.error(msg.apply());
                return;

            default:
                logger.error("[Unsupported error level '" + level + "']: " + msg.apply());
        }
    }

}
